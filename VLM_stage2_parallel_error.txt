/home/mila/q/qian.yang/anaconda3/envs/FUYU/lib/python3.10/site-packages/deepspeed/runtime/zero/linear.py:49: FutureWarning: `torch.cuda.amp.custom_fwd(args...)` is deprecated. Please use `torch.amp.custom_fwd(args..., device_type='cuda')` instead.
  def forward(ctx, input, weight, bias=None):
/home/mila/q/qian.yang/anaconda3/envs/FUYU/lib/python3.10/site-packages/deepspeed/runtime/zero/linear.py:67: FutureWarning: `torch.cuda.amp.custom_bwd(args...)` is deprecated. Please use `torch.amp.custom_bwd(args..., device_type='cuda')` instead.
  def backward(ctx, grad_output):
/home/mila/q/qian.yang/anaconda3/envs/FUYU/lib/python3.10/site-packages/transformers/training_args.py:1525: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead
  warnings.warn(
/home/mila/q/qian.yang/anaconda3/envs/FUYU/lib/python3.10/site-packages/transformers/training_args.py:1525: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead
  warnings.warn(
/home/mila/q/qian.yang/anaconda3/envs/FUYU/lib/python3.10/site-packages/transformers/training_args.py:1525: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead
  warnings.warn(
/home/mila/q/qian.yang/anaconda3/envs/FUYU/lib/python3.10/site-packages/transformers/training_args.py:1525: FutureWarning: `evaluation_strategy` is deprecated and will be removed in version 4.46 of 🤗 Transformers. Use `eval_strategy` instead
  warnings.warn(
/home/mila/q/qian.yang/anaconda3/envs/FUYU/lib/python3.10/site-packages/deepspeed/runtime/zero/linear.py:49: FutureWarning: `torch.cuda.amp.custom_fwd(args...)` is deprecated. Please use `torch.amp.custom_fwd(args..., device_type='cuda')` instead.
  def forward(ctx, input, weight, bias=None):
/home/mila/q/qian.yang/anaconda3/envs/FUYU/lib/python3.10/site-packages/deepspeed/runtime/zero/linear.py:67: FutureWarning: `torch.cuda.amp.custom_bwd(args...)` is deprecated. Please use `torch.amp.custom_bwd(args..., device_type='cuda')` instead.
  def backward(ctx, grad_output):
/home/mila/q/qian.yang/anaconda3/envs/FUYU/lib/python3.10/site-packages/deepspeed/runtime/zero/linear.py:49: FutureWarning: `torch.cuda.amp.custom_fwd(args...)` is deprecated. Please use `torch.amp.custom_fwd(args..., device_type='cuda')` instead.
  def forward(ctx, input, weight, bias=None):
/home/mila/q/qian.yang/anaconda3/envs/FUYU/lib/python3.10/site-packages/deepspeed/runtime/zero/linear.py:67: FutureWarning: `torch.cuda.amp.custom_bwd(args...)` is deprecated. Please use `torch.amp.custom_bwd(args..., device_type='cuda')` instead.
  def backward(ctx, grad_output):
/home/mila/q/qian.yang/anaconda3/envs/FUYU/lib/python3.10/site-packages/deepspeed/runtime/zero/linear.py:49: FutureWarning: `torch.cuda.amp.custom_fwd(args...)` is deprecated. Please use `torch.amp.custom_fwd(args..., device_type='cuda')` instead.
  def forward(ctx, input, weight, bias=None):
/home/mila/q/qian.yang/anaconda3/envs/FUYU/lib/python3.10/site-packages/deepspeed/runtime/zero/linear.py:67: FutureWarning: `torch.cuda.amp.custom_bwd(args...)` is deprecated. Please use `torch.amp.custom_bwd(args..., device_type='cuda')` instead.
  def backward(ctx, grad_output):
/home/mila/q/qian.yang/anaconda3/envs/FUYU/lib/python3.10/site-packages/deepspeed/runtime/zero/linear.py:49: FutureWarning: `torch.cuda.amp.custom_fwd(args...)` is deprecated. Please use `torch.amp.custom_fwd(args..., device_type='cuda')` instead.
  def forward(ctx, input, weight, bias=None):
/home/mila/q/qian.yang/anaconda3/envs/FUYU/lib/python3.10/site-packages/deepspeed/runtime/zero/linear.py:67: FutureWarning: `torch.cuda.amp.custom_bwd(args...)` is deprecated. Please use `torch.amp.custom_bwd(args..., device_type='cuda')` instead.
  def backward(ctx, grad_output):
You are using a model of type llama to instantiate a model of type llava_llama_parallel. This is not supported for all configurations of models and can yield errors.
You are using a model of type llama to instantiate a model of type llava_llama_parallel. This is not supported for all configurations of models and can yield errors.
You are using a model of type llama to instantiate a model of type llava_llama_parallel. This is not supported for all configurations of models and can yield errors.
You are using a model of type llama to instantiate a model of type llava_llama_parallel. This is not supported for all configurations of models and can yield errors.
Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]Loading checkpoint shards:  50%|█████     | 1/2 [00:20<00:20, 20.64s/it]Loading checkpoint shards:  50%|█████     | 1/2 [00:20<00:20, 20.64s/it]Loading checkpoint shards:  50%|█████     | 1/2 [00:20<00:20, 20.65s/it]Loading checkpoint shards: 100%|██████████| 2/2 [00:26<00:00, 11.76s/it]Loading checkpoint shards: 100%|██████████| 2/2 [00:26<00:00, 13.09s/it]
Loading checkpoint shards: 100%|██████████| 2/2 [00:26<00:00, 11.77s/it]Loading checkpoint shards: 100%|██████████| 2/2 [00:26<00:00, 13.10s/it]
Loading checkpoint shards: 100%|██████████| 2/2 [00:26<00:00, 11.89s/it]Loading checkpoint shards: 100%|██████████| 2/2 [00:26<00:00, 13.20s/it]
Loading checkpoint shards:  50%|█████     | 1/2 [00:28<00:28, 28.07s/it]Loading checkpoint shards: 100%|██████████| 2/2 [00:31<00:00, 13.30s/it]Loading checkpoint shards: 100%|██████████| 2/2 [00:31<00:00, 15.52s/it]
/home/mila/q/qian.yang/LongVLM/Light_Align/VLM_Training/model/multimodal_encoder/builder.py:29: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  weights = torch.load(vision_tower_cfg.vlhead_weights_path)
/home/mila/q/qian.yang/LongVLM/Light_Align/VLM_Training/model/multimodal_encoder/builder.py:29: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  weights = torch.load(vision_tower_cfg.vlhead_weights_path)
/home/mila/q/qian.yang/LongVLM/Light_Align/VLM_Training/model/multimodal_encoder/builder.py:29: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  weights = torch.load(vision_tower_cfg.vlhead_weights_path)
/home/mila/q/qian.yang/LongVLM/Light_Align/VLM_Training/model/multimodal_encoder/builder.py:29: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  weights = torch.load(vision_tower_cfg.vlhead_weights_path)
/home/mila/q/qian.yang/LongVLM/Light_Align/VLM_Training/model/llava_arch_parallel.py:116: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  mm_projector_weights = torch.load(
/home/mila/q/qian.yang/LongVLM/Light_Align/VLM_Training/model/llava_arch_parallel.py:116: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  mm_projector_weights = torch.load(
/home/mila/q/qian.yang/LongVLM/Light_Align/VLM_Training/model/llava_arch_parallel.py:119: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  mm_projector_weights_down = torch.load(
/home/mila/q/qian.yang/LongVLM/Light_Align/VLM_Training/model/llava_arch_parallel.py:116: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  mm_projector_weights = torch.load(
/home/mila/q/qian.yang/LongVLM/Light_Align/VLM_Training/model/llava_arch_parallel.py:116: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  mm_projector_weights = torch.load(
/home/mila/q/qian.yang/LongVLM/Light_Align/VLM_Training/model/llava_arch_parallel.py:119: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  mm_projector_weights_down = torch.load(
/home/mila/q/qian.yang/LongVLM/Light_Align/VLM_Training/model/llava_arch_parallel.py:119: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  mm_projector_weights_down = torch.load(
/home/mila/q/qian.yang/LongVLM/Light_Align/VLM_Training/model/llava_arch_parallel.py:119: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  mm_projector_weights_down = torch.load(
/home/mila/q/qian.yang/anaconda3/envs/FUYU/lib/python3.10/site-packages/deepspeed/runtime/checkpoint_engine/torch_checkpoint_engine.py:28: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  partition = torch.load(path, map_location=map_location)
/home/mila/q/qian.yang/anaconda3/envs/FUYU/lib/python3.10/site-packages/deepspeed/runtime/checkpoint_engine/torch_checkpoint_engine.py:28: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  partition = torch.load(path, map_location=map_location)
/home/mila/q/qian.yang/anaconda3/envs/FUYU/lib/python3.10/site-packages/deepspeed/runtime/checkpoint_engine/torch_checkpoint_engine.py:28: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  partition = torch.load(path, map_location=map_location)
/home/mila/q/qian.yang/anaconda3/envs/FUYU/lib/python3.10/site-packages/deepspeed/runtime/checkpoint_engine/torch_checkpoint_engine.py:28: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  partition = torch.load(path, map_location=map_location)
wandb: WARNING The `run_name` is currently set to the same value as `TrainingArguments.output_dir`. If this was not intended, please specify a different run name by setting the `TrainingArguments.run_name` parameter.
wandb: Currently logged in as: qian-yang (aishwarya-agrawal-mila-org). Use `wandb login --relogin` to force relogin
wandb: wandb version 0.18.5 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.17.5
wandb: Run data is saved locally in /home/mila/q/qian.yang/wandb/run-20241022_212227-b20acn5r
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run /network/scratch/q/qian.yang/light_align/llava_stage2_star7XL_d1024_scale20_parallel
wandb: ⭐️ View project at https://wandb.ai/aishwarya-agrawal-mila-org/huggingface
wandb: 🚀 View run at https://wandb.ai/aishwarya-agrawal-mila-org/huggingface/runs/b20acn5r
  0%|          | 0/5198 [00:00<?, ?it/s]/home/mila/q/qian.yang/anaconda3/envs/FUYU/lib/python3.10/site-packages/transformers/trainer.py:2833: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint_rng_state = torch.load(rng_file)
/home/mila/q/qian.yang/anaconda3/envs/FUYU/lib/python3.10/site-packages/transformers/trainer.py:2833: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint_rng_state = torch.load(rng_file)
/home/mila/q/qian.yang/anaconda3/envs/FUYU/lib/python3.10/site-packages/transformers/trainer.py:2833: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint_rng_state = torch.load(rng_file)
/home/mila/q/qian.yang/anaconda3/envs/FUYU/lib/python3.10/site-packages/transformers/trainer.py:2833: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint_rng_state = torch.load(rng_file)
/home/mila/q/qian.yang/anaconda3/envs/FUYU/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py:600: UserWarning: torch.utils.checkpoint: the use_reentrant parameter should be passed explicitly. In version 2.4 we will raise an exception if use_reentrant is not passed. use_reentrant=False is recommended, but if you need to preserve the current default behavior, you can pass use_reentrant=True. Refer to docs for more details on the differences between the two variants.
  return fn(*args, **kwargs)
/home/mila/q/qian.yang/anaconda3/envs/FUYU/lib/python3.10/site-packages/torch/utils/checkpoint.py:92: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn(
/home/mila/q/qian.yang/anaconda3/envs/FUYU/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py:600: UserWarning: torch.utils.checkpoint: the use_reentrant parameter should be passed explicitly. In version 2.4 we will raise an exception if use_reentrant is not passed. use_reentrant=False is recommended, but if you need to preserve the current default behavior, you can pass use_reentrant=True. Refer to docs for more details on the differences between the two variants.
  return fn(*args, **kwargs)
/home/mila/q/qian.yang/anaconda3/envs/FUYU/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py:600: UserWarning: torch.utils.checkpoint: the use_reentrant parameter should be passed explicitly. In version 2.4 we will raise an exception if use_reentrant is not passed. use_reentrant=False is recommended, but if you need to preserve the current default behavior, you can pass use_reentrant=True. Refer to docs for more details on the differences between the two variants.
  return fn(*args, **kwargs)
/home/mila/q/qian.yang/anaconda3/envs/FUYU/lib/python3.10/site-packages/torch/utils/checkpoint.py:92: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn(
/home/mila/q/qian.yang/anaconda3/envs/FUYU/lib/python3.10/site-packages/torch/utils/checkpoint.py:92: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn(
/home/mila/q/qian.yang/anaconda3/envs/FUYU/lib/python3.10/site-packages/torch/_dynamo/eval_frame.py:600: UserWarning: torch.utils.checkpoint: the use_reentrant parameter should be passed explicitly. In version 2.4 we will raise an exception if use_reentrant is not passed. use_reentrant=False is recommended, but if you need to preserve the current default behavior, you can pass use_reentrant=True. Refer to docs for more details on the differences between the two variants.
  return fn(*args, **kwargs)
/home/mila/q/qian.yang/anaconda3/envs/FUYU/lib/python3.10/site-packages/torch/utils/checkpoint.py:92: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn(
/home/mila/q/qian.yang/anaconda3/envs/FUYU/lib/python3.10/site-packages/torch/utils/checkpoint.py:295: FutureWarning: `torch.cpu.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cpu', args...)` instead.
  with torch.enable_grad(), device_autocast_ctx, torch.cpu.amp.autocast(**ctx.cpu_autocast_kwargs):  # type: ignore[attr-defined]
/home/mila/q/qian.yang/anaconda3/envs/FUYU/lib/python3.10/site-packages/torch/utils/checkpoint.py:295: FutureWarning: `torch.cpu.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cpu', args...)` instead.
  with torch.enable_grad(), device_autocast_ctx, torch.cpu.amp.autocast(**ctx.cpu_autocast_kwargs):  # type: ignore[attr-defined]
/home/mila/q/qian.yang/anaconda3/envs/FUYU/lib/python3.10/site-packages/torch/utils/checkpoint.py:295: FutureWarning: `torch.cpu.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cpu', args...)` instead.
  with torch.enable_grad(), device_autocast_ctx, torch.cpu.amp.autocast(**ctx.cpu_autocast_kwargs):  # type: ignore[attr-defined]
/home/mila/q/qian.yang/anaconda3/envs/FUYU/lib/python3.10/site-packages/torch/utils/checkpoint.py:295: FutureWarning: `torch.cpu.amp.autocast(args...)` is deprecated. Please use `torch.amp.autocast('cpu', args...)` instead.
  with torch.enable_grad(), device_autocast_ctx, torch.cpu.amp.autocast(**ctx.cpu_autocast_kwargs):  # type: ignore[attr-defined]
 52%|█████▏    | 2701/5198 [00:12<00:11, 208.32it/s]                                                     52%|█████▏    | 2701/5198 [00:12<00:11, 208.32it/s]                                                     52%|█████▏    | 2702/5198 [00:23<00:11, 208.32it/s] 52%|█████▏    | 2702/5198 [00:32<00:11, 208.32it/s] 52%|█████▏    | 2703/5198 [00:34<00:40, 61.78it/s]                                                     52%|█████▏    | 2703/5198 [00:34<00:40, 61.78it/s] 52%|█████▏    | 2704/5198 [00:44<00:58, 42.47it/s]                                                    52%|█████▏    | 2704/5198 [00:44<00:58, 42.47it/s] 52%|█████▏    | 2705/5198 [00:56<01:30, 27.45it/s]                                                    52%|█████▏    | 2705/5198 [00:56<01:30, 27.45it/s] 52%|█████▏    | 2706/5198 [01:07<02:14, 18.50it/s]                                                    52%|█████▏    | 2706/5198 [01:07<02:14, 18.50it/s] 52%|█████▏    | 2707/5198 [01:24<03:47, 10.97it/s]                                                    52%|█████▏    | 2707/5198 [01:24<03:47, 10.97it/s] 52%|█████▏    | 2708/5198 [01:35<05:07,  8.11it/s]                                                    52%|█████▏    | 2708/5198 [01:35<05:07,  8.11it/s] 52%|█████▏    | 2709/5198 [01:45<07:03,  5.88it/s]                                                    52%|█████▏    | 2709/5198 [01:45<07:03,  5.88it/s] 52%|█████▏    | 2710/5198 [01:56<09:45,  4.25it/s]                                                    52%|█████▏    | 2710/5198 [01:56<09:45,  4.25it/s] 52%|█████▏    | 2711/5198 [02:06<13:26,  3.08it/s]                                                    52%|█████▏    | 2711/5198 [02:06<13:26,  3.08it/s] 52%|█████▏    | 2712/5198 [02:16<18:20,  2.26it/s]                                                    52%|█████▏    | 2712/5198 [02:16<18:20,  2.26it/s] 52%|█████▏    | 2713/5198 [02:26<25:32,  1.62it/s]                                                    52%|█████▏    | 2713/5198 [02:26<25:32,  1.62it/s] 52%|█████▏    | 2714/5198 [02:37<35:54,  1.15it/s]                                                    52%|█████▏    | 2714/5198 [02:37<35:54,  1.15it/s] 52%|█████▏    | 2715/5198 [03:00<1:06:19,  1.60s/it]                                                      52%|█████▏    | 2715/5198 [03:00<1:06:19,  1.60s/it] 52%|█████▏    | 2716/5198 [03:11<1:25:45,  2.07s/it]                                                      52%|█████▏    | 2716/5198 [03:11<1:25:45,  2.07s/it] 52%|█████▏    | 2717/5198 [03:21<1:45:37,  2.55s/it]                                                      52%|█████▏    | 2717/5198 [03:21<1:45:37,  2.55s/it] 52%|█████▏    | 2718/5198 [03:32<2:14:53,  3.26s/it]                                                      52%|█████▏    | 2718/5198 [03:32<2:14:53,  3.26s/it] 52%|█████▏    | 2719/5198 [03:44<2:50:10,  4.12s/it]                                                      52%|█████▏    | 2719/5198 [03:44<2:50:10,  4.12s/it] 52%|█████▏    | 2720/5198 [03:54<3:22:12,  4.90s/it]                                                      52%|█████▏    | 2720/5198 [03:54<3:22:12,  4.90s/it] 52%|█████▏    | 2721/5198 [04:05<4:01:25,  5.85s/it]                                                      52%|█████▏    | 2721/5198 [04:05<4:01:25,  5.85s/it] 52%|█████▏    | 2722/5198 [04:14<4:25:54,  6.44s/it]                                                      52%|█████▏    | 2722/5198 [04:14<4:25:54,  6.44s/it] 52%|█████▏    | 2723/5198 [04:24<4:51:31,  7.07s/it]                                                      52%|█████▏    | 2723/5198 [04:24<4:51:31,  7.07s/it] 52%|█████▏    | 2724/5198 [04:33<5:15:49,  7.66s/it]                                                      52%|█████▏    | 2724/5198 [04:33<5:15:49,  7.66s/it] 52%|█████▏    | 2725/5198 [04:43<5:37:27,  8.19s/it]                                                      52%|█████▏    | 2725/5198 [04:43<5:37:27,  8.19s/it] 52%|█████▏    | 2726/5198 [04:52<5:43:28,  8.34s/it]                                                      52%|█████▏    | 2726/5198 [04:52<5:43:28,  8.34s/it] 52%|█████▏    | 2727/5198 [05:04<6:22:55,  9.30s/it]                                                      52%|█████▏    | 2727/5198 [05:04<6:22:55,  9.30s/it] 52%|█████▏    | 2728/5198 [05:21<7:50:08, 11.42s/it]                                                      52%|█████▏    | 2728/5198 [05:21<7:50:08, 11.42s/it] 53%|█████▎    | 2729/5198 [05:31<7:31:25, 10.97s/it]                                                      53%|█████▎    | 2729/5198 [05:31<7:31:25, 10.97s/it] 53%|█████▎    | 2730/5198 [05:42<7:33:56, 11.04s/it]                                                      53%|█████▎    | 2730/5198 [05:42<7:33:56, 11.04s/it] 53%|█████▎    | 2731/5198 [05:53<7:34:10, 11.05s/it]                                                      53%|█████▎    | 2731/5198 [05:53<7:34:10, 11.05s/it] 53%|█████▎    | 2732/5198 [06:05<7:48:51, 11.41s/it]                                                      53%|█████▎    | 2732/5198 [06:05<7:48:51, 11.41s/it] 53%|█████▎    | 2733/5198 [06:17<7:48:56, 11.41s/it]                                                      53%|█████▎    | 2733/5198 [06:17<7:48:56, 11.41s/it] 53%|█████▎    | 2734/5198 [06:26<7:23:16, 10.79s/it]                                                      53%|█████▎    | 2734/5198 [06:26<7:23:16, 10.79s/it] 53%|█████▎    | 2735/5198 [06:38<7:35:02, 11.09s/it]                                                      53%|█████▎    | 2735/5198 [06:38<7:35:02, 11.09s/it] 53%|█████▎    | 2736/5198 [06:48<7:21:51, 10.77s/it]                                                      53%|█████▎    | 2736/5198 [06:48<7:21:51, 10.77s/it] 53%|█████▎    | 2737/5198 [06:58<7:18:13, 10.68s/it]                                                      53%|█████▎    | 2737/5198 [06:58<7:18:13, 10.68s/it] 53%|█████▎    | 2738/5198 [07:19<9:28:38, 13.87s/it]                                                      53%|█████▎    | 2738/5198 [07:19<9:28:38, 13.87s/it] 53%|█████▎    | 2739/5198 [07:34<9:33:02, 13.98s/it]                                                      53%|█████▎    | 2739/5198 [07:34<9:33:02, 13.98s/it] 53%|█████▎    | 2740/5198 [07:46<9:09:42, 13.42s/it]                                                      53%|█████▎    | 2740/5198 [07:46<9:09:42, 13.42s/it] 53%|█████▎    | 2741/5198 [07:55<8:20:04, 12.21s/it]                                                      53%|█████▎    | 2741/5198 [07:55<8:20:04, 12.21s/it] 53%|█████▎    | 2742/5198 [08:05<7:48:12, 11.44s/it]                                                      53%|█████▎    | 2742/5198 [08:05<7:48:12, 11.44s/it] 53%|█████▎    | 2743/5198 [08:15<7:27:47, 10.94s/it]                                                      53%|█████▎    | 2743/5198 [08:15<7:27:47, 10.94s/it] 53%|█████▎    | 2744/5198 [08:26<7:30:17, 11.01s/it]                                                      53%|█████▎    | 2744/5198 [08:26<7:30:17, 11.01s/it] 53%|█████▎    | 2745/5198 [08:35<7:14:02, 10.62s/it]                                                      53%|█████▎    | 2745/5198 [08:35<7:14:02, 10.62s/it] 53%|█████▎    | 2746/5198 [08:58<9:40:22, 14.20s/it]                                                      53%|█████▎    | 2746/5198 [08:58<9:40:22, 14.20s/it] 53%|█████▎    | 2747/5198 [09:09<8:55:54, 13.12s/it]                                                      53%|█████▎    | 2747/5198 [09:09<8:55:54, 13.12s/it] 53%|█████▎    | 2748/5198 [09:29<10:21:12, 15.21s/it]                                                       53%|█████▎    | 2748/5198 [09:29<10:21:12, 15.21s/it] 53%|█████▎    | 2749/5198 [09:39<9:21:37, 13.76s/it]                                                       53%|█████▎    | 2749/5198 [09:39<9:21:37, 13.76s/it] 53%|█████▎    | 2750/5198 [09:51<8:52:17, 13.05s/it]                                                      53%|█████▎    | 2750/5198 [09:51<8:52:17, 13.05s/it] 53%|█████▎    | 2751/5198 [10:02<8:30:07, 12.51s/it]                                                      53%|█████▎    | 2751/5198 [10:02<8:30:07, 12.51s/it] 53%|█████▎    | 2752/5198 [10:13<8:13:30, 12.11s/it]                                                      53%|█████▎    | 2752/5198 [10:13<8:13:30, 12.11s/it] 53%|█████▎    | 2753/5198 [10:25<8:12:11, 12.08s/it]                                                      53%|█████▎    | 2753/5198 [10:25<8:12:11, 12.08s/it] 53%|█████▎    | 2754/5198 [10:35<7:43:10, 11.37s/it]                                                      53%|█████▎    | 2754/5198 [10:35<7:43:10, 11.37s/it] 53%|█████▎    | 2755/5198 [10:44<7:24:02, 10.91s/it]                                                      53%|█████▎    | 2755/5198 [10:44<7:24:02, 10.91s/it] 53%|█████▎    | 2756/5198 [10:57<7:37:50, 11.25s/it]                                                      53%|█████▎    | 2756/5198 [10:57<7:37:50, 11.25s/it] 53%|█████▎    | 2757/5198 [11:09<7:47:42, 11.50s/it]                                                      53%|█████▎    | 2757/5198 [11:09<7:47:42, 11.50s/it] 53%|█████▎    | 2758/5198 [11:19<7:32:12, 11.12s/it]                                                      53%|█████▎    | 2758/5198 [11:19<7:32:12, 11.12s/it] 53%|█████▎    | 2759/5198 [11:31<7:41:51, 11.36s/it]                                                      53%|█████▎    | 2759/5198 [11:31<7:41:51, 11.36s/it] 53%|█████▎    | 2760/5198 [11:42<7:42:12, 11.38s/it]                                                      53%|█████▎    | 2760/5198 [11:42<7:42:12, 11.38s/it] 53%|█████▎    | 2761/5198 [11:54<7:49:07, 11.55s/it]                                                      53%|█████▎    | 2761/5198 [11:54<7:49:07, 11.55s/it] 53%|█████▎    | 2762/5198 [12:04<7:32:01, 11.13s/it]                                                      53%|█████▎    | 2762/5198 [12:04<7:32:01, 11.13s/it] 53%|█████▎    | 2763/5198 [12:15<7:29:58, 11.09s/it]                                                      53%|█████▎    | 2763/5198 [12:15<7:29:58, 11.09s/it] 53%|█████▎    | 2764/5198 [12:27<7:33:58, 11.19s/it]                                                      53%|█████▎    | 2764/5198 [12:27<7:33:58, 11.19s/it] 53%|█████▎    | 2765/5198 [12:36<7:06:26, 10.52s/it]                                                      53%|█████▎    | 2765/5198 [12:36<7:06:26, 10.52s/it] 53%|█████▎    | 2766/5198 [12:45<6:49:18, 10.10s/it]                                                      53%|█████▎    | 2766/5198 [12:45<6:49:18, 10.10s/it] 53%|█████▎    | 2767/5198 [13:01<8:09:20, 12.08s/it]                                                      53%|█████▎    | 2767/5198 [13:01<8:09:20, 12.08s/it] 53%|█████▎    | 2768/5198 [13:10<7:24:22, 10.97s/it]                                                      53%|█████▎    | 2768/5198 [13:10<7:24:22, 10.97s/it] 53%|█████▎    | 2769/5198 [13:33<9:46:53, 14.50s/it]                                                      53%|█████▎    | 2769/5198 [13:33<9:46:53, 14.50s/it]wandb: ERROR Error while calling W&B API: context deadline exceeded (<Response [500]>)
 53%|█████▎    | 2770/5198 [13:47<9:42:16, 14.39s/it]                                                      53%|█████▎    | 2770/5198 [13:47<9:42:16, 14.39s/it] 53%|█████▎    | 2771/5198 [13:56<8:43:44, 12.95s/it]                                                      53%|█████▎    | 2771/5198 [13:56<8:43:44, 12.95s/it] 53%|█████▎    | 2772/5198 [14:06<7:59:13, 11.85s/it]                                                      53%|█████▎    | 2772/5198 [14:06<7:59:13, 11.85s/it] 53%|█████▎    | 2773/5198 [14:20<8:26:13, 12.53s/it]                                                      53%|█████▎    | 2773/5198 [14:20<8:26:13, 12.53s/it] 53%|█████▎    | 2774/5198 [14:30<7:59:24, 11.87s/it]                                                      53%|█████▎    | 2774/5198 [14:30<7:59:24, 11.87s/it] 53%|█████▎    | 2775/5198 [14:45<8:38:10, 12.83s/it]                                                      53%|█████▎    | 2775/5198 [14:45<8:38:10, 12.83s/it] 53%|█████▎    | 2776/5198 [14:57<8:26:37, 12.55s/it]                                                      53%|█████▎    | 2776/5198 [14:57<8:26:37, 12.55s/it] 53%|█████▎    | 2777/5198 [15:18<10:06:01, 15.02s/it]                                                       53%|█████▎    | 2777/5198 [15:18<10:06:01, 15.02s/it] 53%|█████▎    | 2778/5198 [15:40<11:35:51, 17.25s/it]                                                       53%|█████▎    | 2778/5198 [15:40<11:35:51, 17.25s/it] 53%|█████▎    | 2779/5198 [15:50<10:08:57, 15.10s/it]                                                       53%|█████▎    | 2779/5198 [15:50<10:08:57, 15.10s/it] 53%|█████▎    | 2780/5198 [16:00<9:04:28, 13.51s/it]                                                       53%|█████▎    | 2780/5198 [16:00<9:04:28, 13.51s/it] 54%|█████▎    | 2781/5198 [16:10<8:22:41, 12.48s/it]                                                      54%|█████▎    | 2781/5198 [16:10<8:22:41, 12.48s/it] 54%|█████▎    | 2782/5198 [16:22<8:10:58, 12.19s/it]                                                      54%|█████▎    | 2782/5198 [16:22<8:10:58, 12.19s/it] 54%|█████▎    | 2783/5198 [16:36<8:31:03, 12.70s/it]                                                      54%|█████▎    | 2783/5198 [16:36<8:31:03, 12.70s/it] 54%|█████▎    | 2784/5198 [16:45<7:50:30, 11.69s/it]                                                      54%|█████▎    | 2784/5198 [16:45<7:50:30, 11.69s/it] 54%|█████▎    | 2785/5198 [16:58<8:07:04, 12.11s/it]                                                      54%|█████▎    | 2785/5198 [16:58<8:07:04, 12.11s/it] 54%|█████▎    | 2786/5198 [17:08<7:40:38, 11.46s/it]                                                      54%|█████▎    | 2786/5198 [17:08<7:40:38, 11.46s/it] 54%|█████▎    | 2787/5198 [17:30<9:50:31, 14.70s/it]                                                      54%|█████▎    | 2787/5198 [17:30<9:50:31, 14.70s/it] 54%|█████▎    | 2788/5198 [17:43<9:21:51, 13.99s/it]                                                      54%|█████▎    | 2788/5198 [17:43<9:21:51, 13.99s/it] 54%|█████▎    | 2789/5198 [17:52<8:30:06, 12.71s/it]                                                      54%|█████▎    | 2789/5198 [17:52<8:30:06, 12.71s/it] 54%|█████▎    | 2790/5198 [18:02<7:51:53, 11.76s/it]                                                      54%|█████▎    | 2790/5198 [18:02<7:51:53, 11.76s/it] 54%|█████▎    | 2791/5198 [18:13<7:48:56, 11.69s/it]                                                      54%|█████▎    | 2791/5198 [18:13<7:48:56, 11.69s/it] 54%|█████▎    | 2792/5198 [18:24<7:36:58, 11.40s/it]                                                      54%|█████▎    | 2792/5198 [18:24<7:36:58, 11.40s/it] 54%|█████▎    | 2793/5198 [18:35<7:30:50, 11.25s/it]                                                      54%|█████▎    | 2793/5198 [18:35<7:30:50, 11.25s/it] 54%|█████▍    | 2794/5198 [18:51<8:30:48, 12.75s/it]                                                      54%|█████▍    | 2794/5198 [18:51<8:30:48, 12.75s/it] 54%|█████▍    | 2795/5198 [19:02<8:10:58, 12.26s/it]                                                      54%|█████▍    | 2795/5198 [19:02<8:10:58, 12.26s/it] 54%|█████▍    | 2796/5198 [19:15<8:21:13, 12.52s/it]                                                      54%|█████▍    | 2796/5198 [19:15<8:21:13, 12.52s/it] 54%|█████▍    | 2797/5198 [19:28<8:15:57, 12.39s/it]                                                      54%|█████▍    | 2797/5198 [19:28<8:15:57, 12.39s/it] 54%|█████▍    | 2798/5198 [19:39<7:59:24, 11.99s/it]                                                      54%|█████▍    | 2798/5198 [19:39<7:59:24, 11.99s/it] 54%|█████▍    | 2799/5198 [19:48<7:25:48, 11.15s/it]                                                      54%|█████▍    | 2799/5198 [19:48<7:25:48, 11.15s/it] 54%|█████▍    | 2800/5198 [19:57<7:01:32, 10.55s/it]                                                      54%|█████▍    | 2800/5198 [19:57<7:01:32, 10.55s/it] 54%|█████▍    | 2801/5198 [20:06<6:47:12, 10.19s/it]                                                      54%|█████▍    | 2801/5198 [20:06<6:47:12, 10.19s/it] 54%|█████▍    | 2802/5198 [20:17<6:52:38, 10.33s/it]                                                      54%|█████▍    | 2802/5198 [20:17<6:52:38, 10.33s/it] 54%|█████▍    | 2803/5198 [20:26<6:38:58, 10.00s/it]                                                      54%|█████▍    | 2803/5198 [20:26<6:38:58, 10.00s/it] 54%|█████▍    | 2804/5198 [20:36<6:34:53,  9.90s/it]                                                      54%|█████▍    | 2804/5198 [20:36<6:34:53,  9.90s/it] 54%|█████▍    | 2805/5198 [20:46<6:39:35, 10.02s/it]                                                      54%|█████▍    | 2805/5198 [20:46<6:39:35, 10.02s/it] 54%|█████▍    | 2806/5198 [20:56<6:41:09, 10.06s/it]                                                      54%|█████▍    | 2806/5198 [20:56<6:41:09, 10.06s/it] 54%|█████▍    | 2807/5198 [21:06<6:38:38, 10.00s/it]                                                      54%|█████▍    | 2807/5198 [21:06<6:38:38, 10.00s/it] 54%|█████▍    | 2808/5198 [21:18<6:58:35, 10.51s/it]                                                      54%|█████▍    | 2808/5198 [21:18<6:58:35, 10.51s/it] 54%|█████▍    | 2809/5198 [21:30<7:17:44, 10.99s/it]                                                      54%|█████▍    | 2809/5198 [21:30<7:17:44, 10.99s/it] 54%|█████▍    | 2810/5198 [21:52<9:28:48, 14.29s/it]                                                      54%|█████▍    | 2810/5198 [21:52<9:28:48, 14.29s/it] 54%|█████▍    | 2811/5198 [22:02<8:41:45, 13.12s/it]                                                      54%|█████▍    | 2811/5198 [22:02<8:41:45, 13.12s/it] 54%|█████▍    | 2812/5198 [22:24<10:19:33, 15.58s/it]                                                       54%|█████▍    | 2812/5198 [22:24<10:19:33, 15.58s/it] 54%|█████▍    | 2813/5198 [22:34<9:17:36, 14.03s/it]                                                       54%|█████▍    | 2813/5198 [22:34<9:17:36, 14.03s/it] 54%|█████▍    | 2814/5198 [22:44<8:23:46, 12.68s/it]                                                      54%|█████▍    | 2814/5198 [22:44<8:23:46, 12.68s/it] 54%|█████▍    | 2815/5198 [22:54<7:55:59, 11.98s/it]                                                      54%|█████▍    | 2815/5198 [22:54<7:55:59, 11.98s/it] 54%|█████▍    | 2816/5198 [23:03<7:23:11, 11.16s/it]                                                      54%|█████▍    | 2816/5198 [23:03<7:23:11, 11.16s/it] 54%|█████▍    | 2817/5198 [23:15<7:33:41, 11.43s/it]                                                      54%|█████▍    | 2817/5198 [23:15<7:33:41, 11.43s/it] 54%|█████▍    | 2818/5198 [23:25<7:09:11, 10.82s/it]                                                      54%|█████▍    | 2818/5198 [23:25<7:09:11, 10.82s/it] 54%|█████▍    | 2819/5198 [23:33<6:43:42, 10.18s/it]                                                      54%|█████▍    | 2819/5198 [23:33<6:43:42, 10.18s/it] 54%|█████▍    | 2820/5198 [23:44<6:44:29, 10.21s/it]                                                      54%|█████▍    | 2820/5198 [23:44<6:44:29, 10.21s/it] 54%|█████▍    | 2821/5198 [23:54<6:46:25, 10.26s/it]                                                      54%|█████▍    | 2821/5198 [23:54<6:46:25, 10.26s/it] 54%|█████▍    | 2822/5198 [24:05<6:59:14, 10.59s/it]                                                      54%|█████▍    | 2822/5198 [24:05<6:59:14, 10.59s/it] 54%|█████▍    | 2823/5198 [24:15<6:44:07, 10.21s/it]                                                      54%|█████▍    | 2823/5198 [24:15<6:44:07, 10.21s/it] 54%|█████▍    | 2824/5198 [24:26<6:54:16, 10.47s/it]                                                      54%|█████▍    | 2824/5198 [24:26<6:54:16, 10.47s/it] 54%|█████▍    | 2825/5198 [24:35<6:39:36, 10.10s/it]                                                      54%|█████▍    | 2825/5198 [24:35<6:39:36, 10.10s/it] 54%|█████▍    | 2826/5198 [24:46<6:51:52, 10.42s/it]                                                      54%|█████▍    | 2826/5198 [24:46<6:51:52, 10.42s/it] 54%|█████▍    | 2827/5198 [24:58<7:07:58, 10.83s/it]                                                      54%|█████▍    | 2827/5198 [24:58<7:07:58, 10.83s/it] 54%|█████▍    | 2828/5198 [25:11<7:29:55, 11.39s/it]                                                      54%|█████▍    | 2828/5198 [25:11<7:29:55, 11.39s/it] 54%|█████▍    | 2829/5198 [25:21<7:21:14, 11.18s/it]                                                      54%|█████▍    | 2829/5198 [25:21<7:21:14, 11.18s/it] 54%|█████▍    | 2830/5198 [25:33<7:25:08, 11.28s/it]                                                      54%|█████▍    | 2830/5198 [25:33<7:25:08, 11.28s/it] 54%|█████▍    | 2831/5198 [25:46<7:41:16, 11.69s/it]                                                      54%|█████▍    | 2831/5198 [25:46<7:41:16, 11.69s/it] 54%|█████▍    | 2832/5198 [25:56<7:26:08, 11.31s/it]                                                      54%|█████▍    | 2832/5198 [25:56<7:26:08, 11.31s/it] 55%|█████▍    | 2833/5198 [26:07<7:21:47, 11.21s/it]                                                      55%|█████▍    | 2833/5198 [26:07<7:21:47, 11.21s/it]